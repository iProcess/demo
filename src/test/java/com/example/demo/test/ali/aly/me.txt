问答1、 下面的代码在绝大部分时间内都运行得很正常，请问在什么情况下会出现问题？问题的根源在哪里？
（必答-25%）
   import java.util.LinkedList;

  public class Stack {

    LinkedList list = new LinkedList();


    public synchronized void push(Object x) {
      synchronized(list) {
        list.addLast( x );
        notify();
      }
    }

    public synchronized Object pop()
      throws Exception {
      synchronized(list) {
        if( list.size() <= 0 ) {
          wait();
        }
        return list.removeLast();
      }
    }
  }
答题：
假设LinkedList是空的，此时A线程获取锁，进行pop()，之后会进入wait()，释放了锁，现在另一个线程B获取锁，进行了push()操作，在进行了add操作之后，
CPU进行了时间片切换，这个时候，来了另一个线程C，进行pop()操作，被阻塞，CPU时间片切换，B进行notify()操作之后，释放锁，A被唤醒，但未获取到CPU时
间片，C获取到了时间片和锁，进入判断list.size() <= 0，不符合条件，所以不会进行wait()，进行了removeLast(),之后释放锁和CPU资源，
紧接着CPU时间片切换，A获取到了时间片和锁，从上次wait()的地方开始执行，进行了removeLast()，此时list是空的，将会抛出异常。

以下回答仅供参考：
synchronized是独占锁，这里push和pop使用的是同一把锁，同时进行push和pop的时候，会出现锁竞争，互相等待对方
释放锁，出现死锁。

list.removeLast()是线程不安全的，

LinkedList没有大小限制，如push的线程一直获取到cpu资源，则会一直添加数据到LinkedList，内存暴了

正确解答：
https://blog.csdn.net/a13662080711/article/details/107583333
要解决这个问题，就需要弄明白以下几点：

1》首先，弄明白有几个对象会被线程锁定？
回答：2个，一个是this，一个是list。

2》然后，弄明白wait()与notify针对的是哪个对象的锁？
回答：this，因为调用方式是o.wait(), o.nofity(), 这里隐藏的含义是 this.wait(), this.notify().

3》什么地方可能出问题？
回答：变化的地方容易出问题。那么哪里导致变化呢？当然是if 判断语句。

4》那么到底会出现什么问题呢？
我们需要分析一下，一旦list的size为0时，会调用this.wait()。这样this对象会释放掉他拥有的所有锁，说明方法中的synchronized会失效，但是list中的锁仍然存在。

那么情况就会变成这样：当前线程T1占有list对象的锁，但是不占有this对象的锁，这样就会出现多线抢this的锁，如果有其他线程T2抢到了this的锁，那么它很有可能执行push或pop操作，但是在执行操作进入方法时发现，T2需要获得list的锁才能继续进行下去，但是现在list的锁被T1占用，T2又获取不到。而T1想要执行push和pop又需要获取T2所占用的this的锁。
那么答案就出来了：T1想获取T2锁定的资源this，T2又想获取T1锁定的资源list，但是双发都不释放自己占有的锁 ，是什么问题呢？很明显，死锁。

5》根源在哪里？
根据前面的分析可知，根源在于不同的线程分别占有了this和list的锁，他们之间互相抢占对方正在占有资源，出现死循环，形成了死锁。

好了，到这里问题圆满解决。你的想法是什么样的呢？欢迎反馈。



编程题：Java编写
• 算法题（二选一）（必答，25%）
1、走阶梯，有n级阶梯，一次可以走一级、两级或者三级，请编写一个函数计算走完该阶梯一共有多少种种方法。
public int calcStairs(int n){
 if(n == 0){
 	return 0;
 }
 if(n == 1){
 	return 1;
 }
 if(n == 2){
 	return 2;
 }
 return calcStairs(n - 1) + calcStairs(n - 2);
}



2、标号1-n的n个人首尾相接，1到3报数，报到3的退出，求最后一个人的标号
• Java语言基础（五选二）（必答，50%）
1、编写代码，使用3个线程，1个线程打印X，一个线程打印Y，一个线程打印Z，同时执行连续打印10次"XYZ"
2、写一个单例实现，希望实现至少3种，写出每种方案的优劣势
public class Singleton1{
 private static Singleton instance;
 private Singleton(){
 }
 public static Singleton getInstance(){
 	if(instance == null){
    	instance = new Singleton();
    }
    return instance;
 }
}
优点：效率高
缺点：线程不安全

public class Singleton2{
 private static Singleton instance;
 private Singleton(){
 }
 public static synchronized Singleton getInstance(){
 	if(instance == null){
    	instance = new Singleton();
    }
    return instance;
 }
}
优点：线程安全
缺点：效率不高

public class Singleton3{
 private static Singleton instance = new Singleton();
 private Singleton(){
 }
 public static Singleton getInstance(){
    return instance;
 }
}
优点：线程安全，效率高
缺点：在类装载时初始化，一直常驻内存，占用内存


3、通过阻塞队列实现写一个生产者-消费者队列

public class Producer extends Thread{
 private Lock lock;
 private Condition produce;
 private Condition consume;
 private SynchronQueue queue;

 public Producer(Lock lock, Condition produce, Condition consume, SynchronQueue queue){
 	this.lock = lock;
    this.produce = produce;
    this.consume = consume;
    this.queue = queue;
 }

 public void run(){
 	produce();
 }

 private void produce(){
 	lock.lock();

 	try{
      while(queue.size > 0){
          consume.signal();
          produce.await();
      }
      quue.offer(1);//插入一个
    }finally{
    	lock.unlock();
    }

 }


}

public class Consumer extends Thread{

	public Producer(Lock lock, Condition produce, Condition consume, SynchronQueue queue){
 	this.lock = lock;
    this.produce = produce;
    this.consume = consume;
    this.queue = queue;
 }

 public void run(){
 	consume();
 }

 private void consume(){
 	lock.lock();

 	try{
      while(queue.size == 0){
          produce.signal();
          consume.await();
      }
      quue.poll(1);//移走一个
    }finally{
    	lock.unlock();
    }

 }

}


4、通过JDK自带工具实现一个间隔并发执行的定时任务
5、找到一个无序数组中找两个特定数，使其相加等于特定数字，请写代码java将它找出来，并指出时间复杂度。例如 【10,25,19,89,75,56,34,54,16，9，-5】找到相加等于28的【19，9 】
• 附加题：（+10分）
1、单机，有限内存 ，大本地硬盘，多CPU的一台机器上存有一个乱序的长整型数字大文件，通过程序对其排序，写出解决思路和代码，以及如果用java实现如何提高并发处理能力
答题：
1、将大文件进行拆分成小文件，例如：1024个文件，具体多少个文件，可以通过计算文件大小和机器内存大小，进行拆分，并对文件名进行0--1023编码；
2、拆分文件时，对读入的整型数据进行处理，比如：0--100放入第0个文件，101--200放入第1个文件，依次类推；
3、对每个文件内的数据进行排序，如冒泡、插入、选择、快速排序 都可以。
4、0-1023个文件排好序后，整体就是有序的。
提高并发：0-1023个文件可以同时进行排序，互不影响。



https://www.cnblogs.com/gaopengpy/p/12913519.html
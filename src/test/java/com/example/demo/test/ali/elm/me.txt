两两交换链表中的节点
方法一：递归
这个题目要求我们从第一个节点开始两两交换链表中的节点，且要真正的交换节点。

算法：

从链表的头节点 head 开始递归。
每次递归都负责交换一对节点。由 firstNode 和 secondNode 表示要交换的两个节点。
下一次递归则是传递的是下一对需要交换的节点。若链表中还有节点，则继续递归。
交换了两个节点以后，返回 secondNode，因为它是交换后的新头。
在所有节点交换完成以后，我们返回交换后的头，实际上是原始链表的第二个节点。

作者：LeetCode
链接：https://leetcode-cn.com/problems/swap-nodes-in-pairs/solution/liang-liang-jiao-huan-lian-biao-zhong-de-jie-di-19/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


答题：（有误）
//评测题目: 无
public class Node{
  private int data;
  private Node next;

  /**
  set get
  **/
}

public class Linked{
  private int size;
  private Node head;


  public Linked swap(Linked head){

    if(head == null || head.next == null){
      return head;
    }

    Linked firstNode = head;
    Linked secondNode = head.getNext();

    firstNode.next = swap(secondNode.getNext());
    secondNode.next = firstNode;

    return secondNode;


  }

}



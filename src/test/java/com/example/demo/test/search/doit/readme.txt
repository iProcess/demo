（一）、Java 中>>和>>>的区别：https://www.cnblogs.com/leo0705/p/8473071.html
Java 中>>和>>>的区别
Java中的位运算符：
>>表示右移，如果该数为正，则高位补0，若为负数，则高位补1；
>>>表示无符号右移，也叫逻辑右移，即若该数为正，则高位补0，而若该数为负数，则右移后高位同样补0。
表达式为：
result = exp1 >> exp2;
result = exp2 >>> exp2;
表示把数exp1向右移动exp2位。
例如：
res = 20 >> 2;
20的二进制为 0001 0100，右移2位后为 0000 0101，则结果就为 res = 5;
res = -20 >> 2;
-20的二进制为其正数的补码加1，即 1110 1011，右移2位后为 1111 1100，结果为 res = -6;
而对于>>>符号而言：
res = 20 >>> 2; 的结果与 >> 相同；
res = -20 >> 2;
-20的二进制为 1110 1011，右移2位，此时高位补0，即 0011 1010，结果为 res = 58;
补充：
<< 是与>>对应的左移运算符，表示将exp1向左移动exp2位，在低位补0。其实，向左移动n位，就相当于乘以2^n。
左移没有<<<运算符！

（二）、二进制补码：https://baike.baidu.com/item/%E8%A1%A5%E7%A0%81/6854613?fromtitle=%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81&fromid=5295284&fr=aladdin
正数
正整数的补码是其二进制表示，与原码相同 [3]  。
例：+9的补码是00001001。（备注：这个+9的补码是用8位2进制来表示的，补码表示方式很多，还有16位二进制补码表示形式，以及32位二进制补码表示形式，64位进制补码表示形式等。每一种补码表示形式都只能表示有限的数字。）
负数
求负整数的补码，将其原码除符号位外的所有位取反（0变1，1变0，符号位为1不变）后加1 [4]  。
同一个数字在不同的补码表示形式中是不同的。比如-15的补码，在8位二进制中是11110001，然而在16位二进制补码表示中，就是1111111111110001。以下都使用8位2进制来表示。
例：求-5的补码。
-5对应负数5（10000101）→所有位取反（11111010）→加00000001(11111011)
所以-5的补码是11111011。
0的补码
数0的补码表示是唯一的 [3]  。
[+0]补=[+0]反=[+0]原=00000000
[ -0]补=11111111+1=00000000

